{
    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:

    "Console.log": {
        "prefix": "abclg",
        "body": ["console.log(\"${1}\", $1);"],
        "description": "Create styled Component"
    },
    "Styled Component Snippet": {
        "prefix": "abscs",
        "body": ["export const $1 = styled.div`", "$2", "`;"],
        "description": "Create styled Component"
    },

    "Styled Component With Props Snippet": {
        "prefix": "abscswp",
        "body": ["export const $1 = styled.div<$2>`", "$3", "`"],
        "description": "Create styled Component with Props"
    },
    "Styled Component With Props and Type Snippet": {
        "prefix": "abscswpt",
        "body": ["type $1Type = {", "$2", "}", "export const $3 = styled.div<$1Type>`", "$4", "`"],
        "description": "Create styled Component with Props"
    },
    "Arrow Function Snippet": {
        "prefix": "abafs",
        "body": ["const $1 = ($2)$3 => {", "$4", "}"],
        "description": "Create Arrow Function"
    },
    "Arrow Function Component Snippet": {
        "prefix": "abafcs",
        "body": [
            "import type { FC } from 'react';",
            "import React from 'react';",
            "",
            "type $1Type = {",
            "$2",
            "}",
            "",
            "export const $1: FC<$1Type> = ({}) => {",
            "return (<div>$1</div>)",
            "}",
            ""
        ],
        "description": "Arrow Function Component"
    },
    "Mutation Function Snippet": {
        "prefix": "abms",
        "body": [
            "import { MutationFunctionOptions, useMutation } from '@apollo/client';",
            "import { useState, useEffect } from 'react';",
            "import MUTATION, { $1ResponseType } from './myMutation';",
            "",
            "type DefaultMutationReturnType<T> = {",
            "    success: boolean;",
            "    error: boolean;",
            "    errorMessage?: string;",
            "    pending: boolean;",
            "    response?: T;",
            "    $2: (options?: MutationFunctionOptions) => void;",
            "};",
            "",
            "type $1ReturnType = DefaultMutationReturnType<$1ResponseType>;",
            "",
            "const $1 = ($3): $1ReturnType => {",
            "    const [success, setSuccess] = useState(false);",
            "    const [error, setError] = useState(false);",
            "    const [errorMessage, setErrorMessage] = useState('');",
            "    const [response, setResponse] = useState<$1ResponseType | undefined>(undefined);",
            "    const [pending, setPending] = useState(false);",
            "    const [$2, { loading }] = useMutation<$1ResponseType>(MUTATION, {",
            "        variables: {",
            "            $3",
            "        },",
            "        update: () => {",
            "            setSuccess(false);",
            "            setErrorMessage('');",
            "            setError(false);",
            "        },",
            "        onCompleted: (res) => {",
            "            setResponse(res);",
            "            setSuccess(true);",
            "            setPending(false);",
            "        },",
            "        onError: (err) => {",
            "            setErrorMessage(err.message);",
            "            setError(true);",
            "            setPending(false);",
            "        }",
            "    });",
            "    useEffect(() => {",
            "        if (loading === true) {",
            "            setPending(true);",
            "        }",
            "    }, [loading]);",
            "    return {",
            "        $2,",
            "        success,",
            "        error,",
            "        response,",
            "        errorMessage,",
            "        pending",
            "    };",
            "};",
            "export default $1;"
        ],
        "description": "Mutation Function Snippet"
    }
}
